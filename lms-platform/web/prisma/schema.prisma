// This is your Prisma schema file,
// learn more about it at https://prismlang.github.io/docs/reference/all-prisma-directives

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String?
  role          Role      @default(STUDENT)
  locale        String?   @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enrollments   Enrollment[]
  submissions   Submission[]
  assignments   Assignment[]
  forums        Forum[]
  posts         Post[]
  notifications Notification[]
}

model Role {
  ADMIN    "ADMIN"
  INSTRUCTOR "INSTRUCTOR"
  STUDENT  "STUDENT"
  TA       "TA"
}

model Organization {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       User[]
  courses     Course[]
}

model Course {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  description   String?
  status        CourseStatus @default(DRAFT)
  visibility    Visibility  @default(PRIVATE)
  startAt       DateTime?
  endAt         DateTime?
  language      String?     @default("en")
  coverUrl      String?
  organization  Organization?
  moduleId      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  modules       Module[]
  enrollments   Enrollment[]
  assignments   Assignment[]
  quizzes       Quiz[]
  forums        Forum[]
  scormPackages ScormPackage[]
}

model CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Visibility {
  PUBLIC
  PRIVATE
  HIDDEN
}

model Module {
  id         String     @id @default(cuid())
  title      String
  description String?
  order      Int
  courseId   String
  course     Course     @relation(fields: [courseId], references: [id])
  lessons    Lesson[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  contentMDX  String?
  durationMin Int?       @default(0)
  resources   Json?
  moduleId    String
  module      Module     @relation(fields: [moduleId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  roleInCourse Role     @default(STUDENT)
  status     EnrollmentStatus @default(PENDING)
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
  createdAt  DateTime @default(now())
}

model EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  DROPPED
}

model Assignment {
  id          String      @id @default(cuid())
  title       String
  description String?
  dueAt       DateTime?
  maxPoints   Float?      @default(100.0)
  rubricJson  Json?
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  submissions Submission[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Submission {
  id          String     @id @default(cuid())
  assignmentId String
  userId      String
  status      SubmissionStatus @default(PENDING)
  grade       Float?
  feedback    String?
  files       Json?
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  configJson  Json?
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id])
  questions   Question[]
  attempts    Attempt[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id          String     @id @default(cuid())
  quizId      String
  type        QuestionType
  prompt      String
  optionsJson Json?
  answerKeyJson Json?
  quiz        Quiz       @relation(fields: [quizId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  MATCHING
  ESSAY
  CODE_RUNNER
}

model Attempt {
  id          String     @id @default(cuid())
  quizId      String
  userId      String
  startedAt   DateTime   @default(now())
  finishedAt  DateTime?
  score       Float?
  detailJson  Json?
  quiz        Quiz       @relation(fields: [quizId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model GradeItem {
  id         String     @id @default(cuid())
  courseId   String
  type       GradeItemType
  refId      String
  weight     Float      @default(1.0)
  course     Course     @relation(fields: [courseId], references: [id])
  entries    GradeEntry[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model GradeItemType {
  ASSIGNMENT
  QUIZ
  EXAM
}

model GradeEntry {
  id         String     @id @default(cuid())
  gradeItemId String
  userId     String
  score      Float?
  feedback   String?
  gradeItem  GradeItem  @relation(fields: [gradeItemId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Forum {
  id          String     @id @default(cuid())
  title       String
  description String?
  courseId    String?
  course      Course?    @relation(fields: [courseId], references: [id])
  posts       Post[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Post {
  id          String     @id @default(cuid())
  forumId     String
  userId      String
  content     String
  parentId    String?
  forum       Forum      @relation(fields: [forumId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ScormPackage {
  id            String     @id @default(cuid())
  courseId      String
  title         String
  manifestJson  Json?
  storagePrefix String
  course        Course     @relation(fields: [courseId], references: [id])
  attempts      ScormAttempt[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ScormAttempt {
  id            String     @id @default(cuid())
  packageId     String
  userId        String
  status        ScormStatus @default(INITIALIZED)
  score         Float?
  durationSec   Int?
  suspendData   Json?
  package       ScormPackage @relation(fields: [packageId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ScormStatus {
  INITIALIZED
  IN_PROGRESS
  COMPLETED
  FAILED
  SUSPENDED
}

model XapiStatement {
  id        String    @id @default(cuid())
  actor     Json
  verb      Json
  object    Json
  resultJson Json?
  contextJson Json?
  timestamp DateTime  @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payloadJson Json?
  readAt    DateTime?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model CalendarEvent {
  id          String   @id @default(cuid())
  courseId    String?
  userId      String?
  title       String
  start       DateTime
  end         DateTime
  location    String?
  type        CalendarEventType
  course      Course?  @relation(fields: [courseId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model CalendarEventType {
  CLASS
  DEADLINE
  EXAM
  MEETING
  OTHER
}
